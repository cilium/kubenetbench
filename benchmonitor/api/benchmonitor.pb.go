// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.6.1
// source: benchmonitor/benchmonitor.proto

package api

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_benchmonitor_benchmonitor_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_benchmonitor_benchmonitor_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_benchmonitor_benchmonitor_proto_rawDescGZIP(), []int{0}
}

type CollectionConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Duration     string `protobuf:"bytes,1,opt,name=duration,proto3" json:"duration,omitempty"`
	CollectionId string `protobuf:"bytes,2,opt,name=collectionId,proto3" json:"collectionId,omitempty"`
}

func (x *CollectionConf) Reset() {
	*x = CollectionConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_benchmonitor_benchmonitor_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionConf) ProtoMessage() {}

func (x *CollectionConf) ProtoReflect() protoreflect.Message {
	mi := &file_benchmonitor_benchmonitor_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionConf.ProtoReflect.Descriptor instead.
func (*CollectionConf) Descriptor() ([]byte, []int) {
	return file_benchmonitor_benchmonitor_proto_rawDescGZIP(), []int{1}
}

func (x *CollectionConf) GetDuration() string {
	if x != nil {
		return x.Duration
	}
	return ""
}

func (x *CollectionConf) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

type CollectionResultsConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionId string `protobuf:"bytes,1,opt,name=collectionId,proto3" json:"collectionId,omitempty"`
}

func (x *CollectionResultsConf) Reset() {
	*x = CollectionResultsConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_benchmonitor_benchmonitor_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionResultsConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionResultsConf) ProtoMessage() {}

func (x *CollectionResultsConf) ProtoReflect() protoreflect.Message {
	mi := &file_benchmonitor_benchmonitor_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionResultsConf.ProtoReflect.Descriptor instead.
func (*CollectionResultsConf) Descriptor() ([]byte, []int) {
	return file_benchmonitor_benchmonitor_proto_rawDescGZIP(), []int{2}
}

func (x *CollectionResultsConf) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

type File struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *File) Reset() {
	*x = File{}
	if protoimpl.UnsafeEnabled {
		mi := &file_benchmonitor_benchmonitor_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*File) ProtoMessage() {}

func (x *File) ProtoReflect() protoreflect.Message {
	mi := &file_benchmonitor_benchmonitor_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use File.ProtoReflect.Descriptor instead.
func (*File) Descriptor() ([]byte, []int) {
	return file_benchmonitor_benchmonitor_proto_rawDescGZIP(), []int{3}
}

func (x *File) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_benchmonitor_benchmonitor_proto protoreflect.FileDescriptor

var file_benchmonitor_benchmonitor_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2f, 0x62,
	0x65, 0x6e, 0x63, 0x68, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0c, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x22,
	0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x50, 0x0a, 0x0e, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x3b, 0x0a, 0x15, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x1a, 0x0a, 0x04, 0x46, 0x69, 0x6c, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x32, 0xea, 0x01, 0x0a, 0x10, 0x4b, 0x75, 0x62, 0x65, 0x62, 0x65, 0x6e, 0x63,
	0x68, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x53,
	0x79, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x13, 0x2e, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x12, 0x2e, 0x62, 0x65,
	0x6e, 0x63, 0x68, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x22,
	0x00, 0x30, 0x01, 0x12, 0x46, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x2e, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x1a, 0x13, 0x2e, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x12, 0x23, 0x2e, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x1a, 0x12, 0x2e, 0x62, 0x65, 0x6e, 0x63, 0x68,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x00, 0x30, 0x01,
	0x42, 0x06, 0x5a, 0x04, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_benchmonitor_benchmonitor_proto_rawDescOnce sync.Once
	file_benchmonitor_benchmonitor_proto_rawDescData = file_benchmonitor_benchmonitor_proto_rawDesc
)

func file_benchmonitor_benchmonitor_proto_rawDescGZIP() []byte {
	file_benchmonitor_benchmonitor_proto_rawDescOnce.Do(func() {
		file_benchmonitor_benchmonitor_proto_rawDescData = protoimpl.X.CompressGZIP(file_benchmonitor_benchmonitor_proto_rawDescData)
	})
	return file_benchmonitor_benchmonitor_proto_rawDescData
}

var file_benchmonitor_benchmonitor_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_benchmonitor_benchmonitor_proto_goTypes = []interface{}{
	(*Empty)(nil),                 // 0: benchmonitor.Empty
	(*CollectionConf)(nil),        // 1: benchmonitor.CollectionConf
	(*CollectionResultsConf)(nil), // 2: benchmonitor.CollectionResultsConf
	(*File)(nil),                  // 3: benchmonitor.File
}
var file_benchmonitor_benchmonitor_proto_depIdxs = []int32{
	0, // 0: benchmonitor.KubebenchMonitor.GetSysInfo:input_type -> benchmonitor.Empty
	1, // 1: benchmonitor.KubebenchMonitor.StartCollection:input_type -> benchmonitor.CollectionConf
	2, // 2: benchmonitor.KubebenchMonitor.GetCollectionResults:input_type -> benchmonitor.CollectionResultsConf
	3, // 3: benchmonitor.KubebenchMonitor.GetSysInfo:output_type -> benchmonitor.File
	0, // 4: benchmonitor.KubebenchMonitor.StartCollection:output_type -> benchmonitor.Empty
	3, // 5: benchmonitor.KubebenchMonitor.GetCollectionResults:output_type -> benchmonitor.File
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_benchmonitor_benchmonitor_proto_init() }
func file_benchmonitor_benchmonitor_proto_init() {
	if File_benchmonitor_benchmonitor_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_benchmonitor_benchmonitor_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_benchmonitor_benchmonitor_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_benchmonitor_benchmonitor_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionResultsConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_benchmonitor_benchmonitor_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*File); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_benchmonitor_benchmonitor_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_benchmonitor_benchmonitor_proto_goTypes,
		DependencyIndexes: file_benchmonitor_benchmonitor_proto_depIdxs,
		MessageInfos:      file_benchmonitor_benchmonitor_proto_msgTypes,
	}.Build()
	File_benchmonitor_benchmonitor_proto = out.File
	file_benchmonitor_benchmonitor_proto_rawDesc = nil
	file_benchmonitor_benchmonitor_proto_goTypes = nil
	file_benchmonitor_benchmonitor_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// KubebenchMonitorClient is the client API for KubebenchMonitor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KubebenchMonitorClient interface {
	GetSysInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (KubebenchMonitor_GetSysInfoClient, error)
	StartCollection(ctx context.Context, in *CollectionConf, opts ...grpc.CallOption) (*Empty, error)
	GetCollectionResults(ctx context.Context, in *CollectionResultsConf, opts ...grpc.CallOption) (KubebenchMonitor_GetCollectionResultsClient, error)
}

type kubebenchMonitorClient struct {
	cc grpc.ClientConnInterface
}

func NewKubebenchMonitorClient(cc grpc.ClientConnInterface) KubebenchMonitorClient {
	return &kubebenchMonitorClient{cc}
}

func (c *kubebenchMonitorClient) GetSysInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (KubebenchMonitor_GetSysInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &_KubebenchMonitor_serviceDesc.Streams[0], "/benchmonitor.KubebenchMonitor/GetSysInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &kubebenchMonitorGetSysInfoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KubebenchMonitor_GetSysInfoClient interface {
	Recv() (*File, error)
	grpc.ClientStream
}

type kubebenchMonitorGetSysInfoClient struct {
	grpc.ClientStream
}

func (x *kubebenchMonitorGetSysInfoClient) Recv() (*File, error) {
	m := new(File)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *kubebenchMonitorClient) StartCollection(ctx context.Context, in *CollectionConf, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/benchmonitor.KubebenchMonitor/StartCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubebenchMonitorClient) GetCollectionResults(ctx context.Context, in *CollectionResultsConf, opts ...grpc.CallOption) (KubebenchMonitor_GetCollectionResultsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_KubebenchMonitor_serviceDesc.Streams[1], "/benchmonitor.KubebenchMonitor/GetCollectionResults", opts...)
	if err != nil {
		return nil, err
	}
	x := &kubebenchMonitorGetCollectionResultsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KubebenchMonitor_GetCollectionResultsClient interface {
	Recv() (*File, error)
	grpc.ClientStream
}

type kubebenchMonitorGetCollectionResultsClient struct {
	grpc.ClientStream
}

func (x *kubebenchMonitorGetCollectionResultsClient) Recv() (*File, error) {
	m := new(File)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// KubebenchMonitorServer is the server API for KubebenchMonitor service.
type KubebenchMonitorServer interface {
	GetSysInfo(*Empty, KubebenchMonitor_GetSysInfoServer) error
	StartCollection(context.Context, *CollectionConf) (*Empty, error)
	GetCollectionResults(*CollectionResultsConf, KubebenchMonitor_GetCollectionResultsServer) error
}

// UnimplementedKubebenchMonitorServer can be embedded to have forward compatible implementations.
type UnimplementedKubebenchMonitorServer struct {
}

func (*UnimplementedKubebenchMonitorServer) GetSysInfo(*Empty, KubebenchMonitor_GetSysInfoServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSysInfo not implemented")
}
func (*UnimplementedKubebenchMonitorServer) StartCollection(context.Context, *CollectionConf) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartCollection not implemented")
}
func (*UnimplementedKubebenchMonitorServer) GetCollectionResults(*CollectionResultsConf, KubebenchMonitor_GetCollectionResultsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCollectionResults not implemented")
}

func RegisterKubebenchMonitorServer(s *grpc.Server, srv KubebenchMonitorServer) {
	s.RegisterService(&_KubebenchMonitor_serviceDesc, srv)
}

func _KubebenchMonitor_GetSysInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KubebenchMonitorServer).GetSysInfo(m, &kubebenchMonitorGetSysInfoServer{stream})
}

type KubebenchMonitor_GetSysInfoServer interface {
	Send(*File) error
	grpc.ServerStream
}

type kubebenchMonitorGetSysInfoServer struct {
	grpc.ServerStream
}

func (x *kubebenchMonitorGetSysInfoServer) Send(m *File) error {
	return x.ServerStream.SendMsg(m)
}

func _KubebenchMonitor_StartCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionConf)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubebenchMonitorServer).StartCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/benchmonitor.KubebenchMonitor/StartCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubebenchMonitorServer).StartCollection(ctx, req.(*CollectionConf))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubebenchMonitor_GetCollectionResults_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CollectionResultsConf)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KubebenchMonitorServer).GetCollectionResults(m, &kubebenchMonitorGetCollectionResultsServer{stream})
}

type KubebenchMonitor_GetCollectionResultsServer interface {
	Send(*File) error
	grpc.ServerStream
}

type kubebenchMonitorGetCollectionResultsServer struct {
	grpc.ServerStream
}

func (x *kubebenchMonitorGetCollectionResultsServer) Send(m *File) error {
	return x.ServerStream.SendMsg(m)
}

var _KubebenchMonitor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "benchmonitor.KubebenchMonitor",
	HandlerType: (*KubebenchMonitorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartCollection",
			Handler:    _KubebenchMonitor_StartCollection_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSysInfo",
			Handler:       _KubebenchMonitor_GetSysInfo_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetCollectionResults",
			Handler:       _KubebenchMonitor_GetCollectionResults_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "benchmonitor/benchmonitor.proto",
}
